{
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "title": "HCLOptionsFormat",
    "required": ["name", "version", "identifier", "format"],
    "properties": {
        "name": {
            "type": "string",
            "description": "The name of the options format.",
            "minLength": "1"
        },
        "version": {
            "type": "string",
            "description": "The version of the options format.",
            "minLength": "1",
            "maxLength": "20"
        },
        "identifier": {
            "type": "string",
            "description": "The identifier used to ID an options file of this type. This is an alphanumeric string with no whitespace or special characters.",
            "minLength": "1",
            "maxLength": "50"
        },
        "detectedNames": {
            "type": "array",
            "description": "An optional list of name patterns that will automatically be assigned this options format.",
            "minItems": 1,
            "items": {
                "anyOf": [
                    {
                        "type": "string"
                    },
                    {
                        "$ref": "#/definitions/memberNameDetection"
                    }
                ]
            }
        },
        "format": {
            "type": "object",
            "description": "The formatting information for an options file of this type.",
            "additionalProperties": false,
            "required": ["syntax", "definitions"],
            "properties": {
                "syntax": {
                    "type": "object",
                    "description": "Syntax definitions for this options file type.",
                    "additionalProperties": false,
                    "properties": {
                        "usesDSNType": {
                            "type": "boolean",
                            "description": "Indicates whether this format uses the non-quoted DSN value type."
                        },
                        "usesDDNameType": {
                            "type": "boolean",
                            "description": "Indicates whether this format uses the non-quoted DD name value type."
                        },
                        "lineComment": {
                            "type": "string",
                            "description": "Regular expression used to identify a line comment."
                        },
                        "blockComment": {
                            "type": "object",
                            "description": "A set of regular expressions to identify a block comment.",
                            "additionalProperties": false,
                            "required": ["begin", "end"],
                            "properties": {
                                "begin": {
                                    "type": "string",
                                    "description": "Regular expression used to identify the start of a block comment."
                                },
                                "end": {
                                    "type": "string",
                                    "description": "Regular expression used to identify the end of a block comment."
                                }
                            }
                        },
                        "string": {
                            "type": "object",
                            "description": "A pair of regex values used to pair string literal delimiters.",
                            "require": ["begin","end"],
                            "properties": {
                                "begin": {
                                    "type": "string",
                                    "description": "Regular expression used to identify the start of a string literal."
                                },
                                "end": {
                                    "type": "string",
                                    "description": "Regular expression used to identify the end of a string literal."
                                }
                            }
                        },
                        "keyKeySeparator": {
                            "type": "string",
                            "desecription": "A regular expression to identify separators between two options, if needed. Defaults to a new line character."
                        },
                        "keyValueSeparator": {
                            "type": "string",
                            "description": "Regular expression to identify a separator between option keys and values."
                        },
                        "valueValueSeparator": {
                            "type": "string",
                            "description": "A regular expression to identify a separator between multiple values of the same option."
                        },
                        "valueDelimiter": {
                            "type": "object",
                            "description": "A set of regular expressions to identify enclosing value set delimiters.",
                            "additionalProperties": false,
                            "required": ["begin", "end"],
                            "properties": {
                                "begin": {
                                    "type": "string",
                                    "description": "Regular expression used to identify the start of a value delimitation."
                                },
                                "end": {
                                    "type": "string",
                                    "description": "Regular expression used to identify the end of a value delimitation."
                                }
                            }
                        },
                        "isDelimiterKeyValueSeparator": {
                            "type": "boolean",
                            "description": "Boolean indicating whether the value delimiter can be used as the key-value separator."
                        },
                        "keyValSepAfterEnum": {
                            "type": "boolean",
                            "description": "Boolean indicating whether a key-value separator can follow an enumerated sub-option."
                        },
                        "mustHaveKeyKeySeparator": {
                            "type": "boolean",
                            "description": "Boolean indicating whether a key-key separator must be used even if the next option is on a new line, if it is defined."
                        }
                    }
                },
                "definitions": {
                    "type": "object",
                    "description": "The format definitions for each option.",
                    "additionalProperties": false,
                    "require": ["case-sensitive", "options"],
                    "properties": {
                        "caseSensitive": {
                            "type": "boolean",
                            "description": "Boolean indicating whether option names are case sensitive or not."
                        },
                        "options": {
                            "type": "array",
                            "description": "An array containing option sets. Each option set is a group of option keywords that are exclusive to each other (e.g. 'CaseSensitive' and 'CaseSenitiveOFF'), or just a single option keyword.",
                            "items": {
                                "type": "object",
                                "additionalProperties": false,
                                "require": ["name", "keywords"],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name describing this option or set of options."
                                    },
                                    "description": "A description of this option set.",
                                    "keywords": {
                                        "type": "array",
                                        "description": "An array of keyword forms this option can take that are exclusive to each other.",
                                        "minItems": 1,
                                        "items": {
                                            "$ref": "#/definitions/keywordDefinition"
                                        }
                                    }
                                }
                            }
                        },
                        "unitTypes": {
                            "type": "array",
                            "description": "A list of unit type definitions that are referred to when a value that has the unit data type is identified.",
                            "items": {
                                "$ref": "#/definitions/unitType"
                            }
                        },
                        "conflicts": {
                            "type": "array",
                            "description": "A list of invalid option/value combinations.",
                            "items": {
                                "type": "object",
                                "description": "A conflict definition between two invalid options.",
                                "properties": {
                                    "isEqualValueConflict": {
                                        "type": "boolean",
                                        "description": "Boolean indicating whether these options having an equal value is the source of conflict."
                                    },
                                    "opt1": {
                                        "$ref": "#/definitions/optionConflict"
                                    },
                                    "opt2": {
                                        "$ref": "#/definitions/optionConflict"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "keywordDefinition": {
            "type": "object",
            "description": "An option key definition.",
            "require": ["name"],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the option."
                },
                "description": {
                    "type": "string",
                    "description": "An explanation or description of the option."
                },
                "regex": {
                    "type": "string",
                    "description": "A regex used to identify this keyword. Defaults to the name if not provided."
                },
                "parameterSet": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/parameterSet"
                        },
                        {
                            "$ref": "#/definitions/parameterSetArray"   
                        }
                    ]
                }
            }
        },
        "parameterSetArray": {
            "type": "array",
            "description": "An array of parameter sets, representing multiple overloads of the same keyword signature.",
            "minItems": 1,
            "items": {
                "$ref": "#/definitions/parameterSet"
            }
        },
        "parameterSet": {
            "type": "object",
            "description": "An object representing a single pattern of parameters that can be assigned to a keyword.",
            "properties": {
                "parameters": {
                    "type": "array",
                    "description": "A list of all the parameters this option takes. Leave this undefined if there are none.",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/parameter"
                    }
                },
                "restParameters": {
                    "$ref": "#/definitions/restParameters"
                }
            }
        },
        "parameter": {
            "type": "object",
            "description": "A parameter field definition.",
            "require": ["name", "valueTypes"],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of this parameter."
                },
                "description": {
                    "type": "string",
                    "description": "The description of this parameter."
                },
                "valueTypes": {
                    "type": "array",
                    "description": "A list of possible value types this parameter takes.",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/valueType"
                    }
                }
            }
        },
        "restParameters": {
            "type": "object",
            "description": "An object that defines the rest parameters of a keyword option.",
            "require": ["restTypes"],
            "properties": {
                "restValueMin": {
                    "type": "integer",
                    "description": "The minimum number of rest input values that must be given to this option after the fixed parameters. Defaults to 0."
                },
                "restValueMax": {
                    "type": "integer",
                    "description": "The maximum number of rest input values that can be given to this option after the fixed parameters. Defaults to unlimited."
                },
                "restTypes": {
                    "type": "array",
                    "description": "A list of possible value types that can occupy the rest parameters.",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/valueType"
                    }
                }
            }
        },
        "valueType": {
            "type": "object",
            "description": "An object describing a value type and its restrictions, if any.",
            "require": ["type"],
            "properties": {
                "type": {
                    "type": "string",
                    "description": "This value's type: string, dsn, ddname, numeric, boolean, or enum.",
                    "pattern": "^(string|dsn|alphanumeric|numeric|boolean|enum)$"
                },
                "unitID": {
                    "type": "string",
                    "description": "If a unit value type is specified, this is the ID of the unit type to be used."
                },
                "numMin": {
                    "type": "integer",
                    "description": "The minimum size of a numeric value."
                },
                "numMax": {
                    "type": "integer",
                    "description": "The maximum size of a numeric value."
                },
                "stringMinLength": {
                    "type": "integer",
                    "description": "The minimum length of a string value"
                },
                "stringMaxLength": {
                    "type": "integer",
                    "description": "The maximum length of a string value"
                },
                "enumDefinition": {
                    "$ref": "#/definitions/keywordDefinition"
                }
            }
        },
        "optionConflict": {
            "type": "object",
            "description": "One of the options in a conflict.",
            "require": ["name"],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the option in the conflict."
                },
                "isDefinedConflict": {
                    "type": "boolean",
                    "description": "Boolean indicating whether this option being defined is the cause of this conflict."
                }
            }
        },
        "unitType": {
            "type": "object",
            "description": "A type definition, including the name, highlighting style and regex.",
            "properties": {
                "unitID": {
                    "type": "string",
                    "description": "The name of the type definition."
                },
                "capturingRegex": {
                    "type": "array",
                    "description": "A list of regex and unit multiplier pairs that are used to identify this unit type.",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/unitRegexCapture"
                    }
                }
            }
        },
        "unitRegexCapture": {
            "type": "object",
            "description": "A pairing of a capturing regex and a unit multiplier for a unit type. E.g. capturing 10K might be treated as 10 * 1024.",
            "properties": {
                "unit": {
                    "type": "string",
                    "description": "A regex that captures the numeric component in a separate group. e.g. '([0-9]+)K'"
                },
                "numericMultiplier": {
                    "type": "numeric",
                    "description": "The multiplier of the captured numeric component that the unit character represents."
                },
                "isUnitBefore": {
                    "type": "boolean",
                    "description": "Boolean indicating whether the unit value should be before or after the numeric value. Defaults to false if not specified."
                }
            }
        },
        "memberNameDetection": {
            "type": "object",
            "description": "A simplified name detection definition for data sets.",
            "required": ["member"],
            "properties": {
                "member": {
                    "type": "string",
                    "description": "A regex pattern for identifying valid dataset members for this format."
                }
            }
        }
    }
}